// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @unique @default(uuid())
  username     String        @unique
  email        String        @unique
  displayName  String
  displayImage String
  createdAt    String
  Community    Community[]
  saved        Post[]
  upvotes      Upvote[]
  downvotes    Downvote[]
  achievements Achievement[]
  Trophies     Trophy[]
  Awards       Award[]
  Comments     Comments[]
}

model Post {
  id            String     @id @unique @default(uuid())
  title         String
  description   String
  createdById   String
  lastUpdatedAt DateTime
  isNSFW        Boolean
  usClosed      Boolean
  communityId   String
  createdBy     User       @relation(fields: [createdById], references: [id])
  community     Community  @relation(fields: [communityId], references: [id])
  downvotes     Downvote[]
  upvotes       Upvote[]
  Comments      Comments[]
}

model Comments {
  id             String   @id @unique @default(uuid())
  description    String
  postId         String
  upvotesCount   Int
  downvotesCount Int
  isDeleted      Boolean
  createdAt      DateTime
  userId         String
  post           Post     @relation(fields: [postId], references: [id])
  createdBy      User     @relation(fields: [userId], references: [id])
  awards         Award[]
}

model Community {
  id           String   @id @unique @default(uuid())
  username     String
  displayName  String
  isNSFW       Boolean
  createdBy    String
  createdAt    DateTime
  displayImage String
  bannerImage  String
  admins       User[]
  Post         Post[]
}

model Achievement {
  id          String  @id @unique @default(uuid())
  title       String
  description String
  imageURL    String
  userId      String?
  User        User?   @relation(fields: [userId], references: [id])
}

model Trophy {
  id          String  @id @unique @default(uuid())
  title       String
  description String
  imageURL    String
  userId      String?
  User        User?   @relation(fields: [userId], references: [id])
}

model Award {
  id          String    @id @unique @default(uuid())
  title       String
  description String
  imageURL    String
  userId      String?
  commentId   String?
  User        User?     @relation(fields: [userId], references: [id])
  Comments    Comments? @relation(fields: [commentId], references: [id])
}

model Upvote {
  id          String   @id @unique @default(uuid())
  createdById String
  createdAt   DateTime
  parentId    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  parent      Post     @relation(fields: [parentId], references: [id])
}

model Downvote {
  id          String   @id @unique @default(uuid())
  createdById String
  createdAt   DateTime
  parentId    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  parent      Post     @relation(fields: [parentId], references: [id])
}
